// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UserTestingAPI.Database;

#nullable disable

namespace UserTestingAPI.Migrations
{
    [DbContext(typeof(UserTestingDbContext))]
    [Migration("20231122091836_Renamed_UserTest_Table")]
    partial class Renamed_UserTest_Table
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UserTestingAPI.Domain.Entities.Option", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Option");

                    b.HasData(
                        new
                        {
                            Id = new Guid("75a5dce6-e6d8-4f96-92ac-7445fda87fd7"),
                            QuestionId = new Guid("470013ef-6651-47e8-8531-0c0fb479bf88"),
                            Text = "Option 1"
                        },
                        new
                        {
                            Id = new Guid("21a643ab-8995-4585-9c0b-8bb86c2a7be6"),
                            QuestionId = new Guid("470013ef-6651-47e8-8531-0c0fb479bf88"),
                            Text = "Option 2"
                        },
                        new
                        {
                            Id = new Guid("3a4fd33b-d51d-4334-a4e6-10b35bee7d57"),
                            QuestionId = new Guid("470013ef-6651-47e8-8531-0c0fb479bf88"),
                            Text = "Option 3"
                        },
                        new
                        {
                            Id = new Guid("b6ba0e08-fd51-40a2-8917-c6cf1aff0d17"),
                            QuestionId = new Guid("470013ef-6651-47e8-8531-0c0fb479bf88"),
                            Text = "Option 4"
                        });
                });

            modelBuilder.Entity("UserTestingAPI.Domain.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CorrectOptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Question");

                    b.HasData(
                        new
                        {
                            Id = new Guid("470013ef-6651-47e8-8531-0c0fb479bf88"),
                            CorrectOptionId = new Guid("75a5dce6-e6d8-4f96-92ac-7445fda87fd7"),
                            TestId = new Guid("43e316f5-d1ef-4f1f-b220-cc997dbbeb36"),
                            Text = "Question 1"
                        },
                        new
                        {
                            Id = new Guid("470151a4-4309-4deb-ae96-66f59a829407"),
                            CorrectOptionId = new Guid("00000000-0000-0000-0000-000000000000"),
                            TestId = new Guid("43e316f5-d1ef-4f1f-b220-cc997dbbeb36"),
                            Text = "Question 2"
                        });
                });

            modelBuilder.Entity("UserTestingAPI.Domain.Entities.Test", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Test");

                    b.HasData(
                        new
                        {
                            Id = new Guid("43e316f5-d1ef-4f1f-b220-cc997dbbeb36"),
                            Title = "Test 1"
                        },
                        new
                        {
                            Id = new Guid("b5900132-d8f4-4478-b8e0-f8a8fafb4aad"),
                            Title = "Test 2"
                        });
                });

            modelBuilder.Entity("UserTestingAPI.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("347a2cb7-d97b-4321-a4e9-f87331dc9405"),
                            Email = "default@mail.com",
                            PasswordHash = "4d8b951b4f5d4624298e324528ce77169c8f5a9ca0a38a246f9620ce93e222e1",
                            PasswordSalt = "Gn6/PkAcfNlj1cha49O4Nw=="
                        });
                });

            modelBuilder.Entity("UserTestingAPI.Domain.Entities.UserTests", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("Mark")
                        .HasColumnType("integer");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5a02c9b-8ade-41b3-8785-60ca2d8a7839"),
                            CompletionDate = new DateTime(2023, 11, 22, 9, 18, 36, 39, DateTimeKind.Utc).AddTicks(6284),
                            Mark = 100,
                            TestId = new Guid("43e316f5-d1ef-4f1f-b220-cc997dbbeb36"),
                            UserId = new Guid("347a2cb7-d97b-4321-a4e9-f87331dc9405")
                        });
                });

            modelBuilder.Entity("UserTestingAPI.Domain.Entities.Option", b =>
                {
                    b.HasOne("UserTestingAPI.Domain.Entities.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("UserTestingAPI.Domain.Entities.Question", b =>
                {
                    b.HasOne("UserTestingAPI.Domain.Entities.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("UserTestingAPI.Domain.Entities.UserTests", b =>
                {
                    b.HasOne("UserTestingAPI.Domain.Entities.Test", "Test")
                        .WithMany("CompletedTests")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserTestingAPI.Domain.Entities.User", "User")
                        .WithMany("CompletedTests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserTestingAPI.Domain.Entities.Question", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("UserTestingAPI.Domain.Entities.Test", b =>
                {
                    b.Navigation("CompletedTests");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("UserTestingAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("CompletedTests");
                });
#pragma warning restore 612, 618
        }
    }
}
