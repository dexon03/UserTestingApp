// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UserTestingAPI.Database;

#nullable disable

namespace UserTestingAPI.Migrations
{
    [DbContext(typeof(UserTestingDbContext))]
    [Migration("20231122105126_Added_More_Question_And_Options")]
    partial class Added_More_Question_And_Options
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UserTestingAPI.Domain.Entities.Option", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Option");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d95caec4-cb62-4f2b-8d47-9f381e649bd4"),
                            QuestionId = new Guid("fd523bbd-d9cd-42d0-8bc5-b06660103fa2"),
                            Text = "Option 1"
                        },
                        new
                        {
                            Id = new Guid("44e5c955-2afe-4d7e-8565-7c501a79a522"),
                            QuestionId = new Guid("fd523bbd-d9cd-42d0-8bc5-b06660103fa2"),
                            Text = "Option 2"
                        },
                        new
                        {
                            Id = new Guid("54c8ee08-3cd8-480c-9a66-8c4a92db8aa0"),
                            QuestionId = new Guid("6d1d1926-0444-4753-912a-ae6d26910fac"),
                            Text = "Option 1"
                        },
                        new
                        {
                            Id = new Guid("a3142274-3894-4d7f-8221-405192a96f2e"),
                            QuestionId = new Guid("6d1d1926-0444-4753-912a-ae6d26910fac"),
                            Text = "Option 2"
                        },
                        new
                        {
                            Id = new Guid("e0fe9eab-ca4e-4292-a14b-1c6f87e325a4"),
                            QuestionId = new Guid("d359df48-5784-40f9-bf5f-2a249a301d88"),
                            Text = "Option 1"
                        },
                        new
                        {
                            Id = new Guid("fba0f34c-aeb0-492f-bd44-ced36726be60"),
                            QuestionId = new Guid("d359df48-5784-40f9-bf5f-2a249a301d88"),
                            Text = "Option 2"
                        },
                        new
                        {
                            Id = new Guid("91f37e92-16ba-44f4-a92b-3bd36937dddc"),
                            QuestionId = new Guid("b0a17d33-b227-458e-939c-cc9415dca297"),
                            Text = "Option 1"
                        },
                        new
                        {
                            Id = new Guid("f78e3fbb-af67-410f-a2af-ae2e2db6529f"),
                            QuestionId = new Guid("b0a17d33-b227-458e-939c-cc9415dca297"),
                            Text = "Option 2"
                        });
                });

            modelBuilder.Entity("UserTestingAPI.Domain.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CorrectOptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Question");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fd523bbd-d9cd-42d0-8bc5-b06660103fa2"),
                            CorrectOptionId = new Guid("d95caec4-cb62-4f2b-8d47-9f381e649bd4"),
                            TestId = new Guid("d6e6ad44-363f-4078-8ae6-bcb7c20d29bc"),
                            Text = "Question 1"
                        },
                        new
                        {
                            Id = new Guid("6d1d1926-0444-4753-912a-ae6d26910fac"),
                            CorrectOptionId = new Guid("44e5c955-2afe-4d7e-8565-7c501a79a522"),
                            TestId = new Guid("d6e6ad44-363f-4078-8ae6-bcb7c20d29bc"),
                            Text = "Question 2"
                        },
                        new
                        {
                            Id = new Guid("d359df48-5784-40f9-bf5f-2a249a301d88"),
                            CorrectOptionId = new Guid("91f37e92-16ba-44f4-a92b-3bd36937dddc"),
                            TestId = new Guid("36efe904-f259-450f-87c4-ac31007dd413"),
                            Text = "Question 1"
                        },
                        new
                        {
                            Id = new Guid("b0a17d33-b227-458e-939c-cc9415dca297"),
                            CorrectOptionId = new Guid("f78e3fbb-af67-410f-a2af-ae2e2db6529f"),
                            TestId = new Guid("36efe904-f259-450f-87c4-ac31007dd413"),
                            Text = "Question 2"
                        });
                });

            modelBuilder.Entity("UserTestingAPI.Domain.Entities.Test", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Test");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d6e6ad44-363f-4078-8ae6-bcb7c20d29bc"),
                            Title = "Test 1"
                        },
                        new
                        {
                            Id = new Guid("36efe904-f259-450f-87c4-ac31007dd413"),
                            Title = "Test 2"
                        });
                });

            modelBuilder.Entity("UserTestingAPI.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ce508cc7-d46f-4bf4-9bf9-0e5bb06194a5"),
                            Email = "default@mail.com",
                            PasswordHash = "60e87e841e9b0edb251f9954556e39e73ea51990ec5488f746daa41e304643fd",
                            PasswordSalt = "E6ys/lDbNzROnSEhf7SyCg=="
                        });
                });

            modelBuilder.Entity("UserTestingAPI.Domain.Entities.UserTests", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("Mark")
                        .HasColumnType("integer");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ba70f171-9d7a-4e52-a2cd-49b9447bb853"),
                            CompletionDate = new DateTime(2023, 11, 22, 10, 51, 26, 737, DateTimeKind.Utc).AddTicks(1943),
                            Mark = 100,
                            TestId = new Guid("d6e6ad44-363f-4078-8ae6-bcb7c20d29bc"),
                            UserId = new Guid("ce508cc7-d46f-4bf4-9bf9-0e5bb06194a5")
                        },
                        new
                        {
                            Id = new Guid("3617154a-ab5f-43f9-85cf-3143bcd5e048"),
                            CompletionDate = new DateTime(2023, 11, 22, 10, 51, 26, 737, DateTimeKind.Utc).AddTicks(1953),
                            TestId = new Guid("36efe904-f259-450f-87c4-ac31007dd413"),
                            UserId = new Guid("ce508cc7-d46f-4bf4-9bf9-0e5bb06194a5")
                        });
                });

            modelBuilder.Entity("UserTestingAPI.Domain.Entities.Option", b =>
                {
                    b.HasOne("UserTestingAPI.Domain.Entities.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("UserTestingAPI.Domain.Entities.Question", b =>
                {
                    b.HasOne("UserTestingAPI.Domain.Entities.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("UserTestingAPI.Domain.Entities.UserTests", b =>
                {
                    b.HasOne("UserTestingAPI.Domain.Entities.Test", "Test")
                        .WithMany("CompletedTests")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserTestingAPI.Domain.Entities.User", "User")
                        .WithMany("CompletedTests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserTestingAPI.Domain.Entities.Question", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("UserTestingAPI.Domain.Entities.Test", b =>
                {
                    b.Navigation("CompletedTests");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("UserTestingAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("CompletedTests");
                });
#pragma warning restore 612, 618
        }
    }
}
