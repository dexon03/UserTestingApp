// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UserTestingAPI.Database;

#nullable disable

namespace UserTestingAPI.Migrations
{
    [DbContext(typeof(UserTestingDbContext))]
    [Migration("20231121152506_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UserTestingAPI.Domain.Entities.CompletedTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Mark")
                        .HasColumnType("integer");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("CompletedTest");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fd35fb11-30f9-4d41-ad01-5c8bd4a14ce9"),
                            CompletionDate = new DateTime(2023, 11, 21, 15, 25, 6, 38, DateTimeKind.Utc).AddTicks(1169),
                            Mark = 100,
                            TestId = new Guid("1d1ea193-3cec-4667-be08-ec03520de019"),
                            UserId = new Guid("2566b911-4aec-46f5-ba91-e7510e217c76")
                        });
                });

            modelBuilder.Entity("UserTestingAPI.Domain.Entities.Option", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Option");

                    b.HasData(
                        new
                        {
                            Id = new Guid("96de87a4-1f6f-450c-ab81-77ac066ca3d5"),
                            QuestionId = new Guid("88794d65-d82d-4148-827e-e26891781fbd"),
                            Text = "Option 1"
                        },
                        new
                        {
                            Id = new Guid("b67985bd-3b9d-4bcb-85e0-bf715514a726"),
                            QuestionId = new Guid("88794d65-d82d-4148-827e-e26891781fbd"),
                            Text = "Option 2"
                        },
                        new
                        {
                            Id = new Guid("d2955876-01d6-4fce-ae1c-d12839342c93"),
                            QuestionId = new Guid("88794d65-d82d-4148-827e-e26891781fbd"),
                            Text = "Option 3"
                        },
                        new
                        {
                            Id = new Guid("fd6f9d21-076e-4133-82bd-456a7975782e"),
                            QuestionId = new Guid("88794d65-d82d-4148-827e-e26891781fbd"),
                            Text = "Option 4"
                        });
                });

            modelBuilder.Entity("UserTestingAPI.Domain.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CorrectOptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Question");

                    b.HasData(
                        new
                        {
                            Id = new Guid("88794d65-d82d-4148-827e-e26891781fbd"),
                            CorrectOptionId = new Guid("96de87a4-1f6f-450c-ab81-77ac066ca3d5"),
                            TestId = new Guid("1d1ea193-3cec-4667-be08-ec03520de019"),
                            Text = "Question 1"
                        },
                        new
                        {
                            Id = new Guid("e8c9507c-935c-48eb-9c80-84934b5e24d1"),
                            CorrectOptionId = new Guid("00000000-0000-0000-0000-000000000000"),
                            TestId = new Guid("1d1ea193-3cec-4667-be08-ec03520de019"),
                            Text = "Question 2"
                        });
                });

            modelBuilder.Entity("UserTestingAPI.Domain.Entities.Test", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Test");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d1ea193-3cec-4667-be08-ec03520de019"),
                            Title = "Test 1"
                        },
                        new
                        {
                            Id = new Guid("37dab780-61e0-4be5-bb65-0ddf97b5b425"),
                            Title = "Test 2"
                        });
                });

            modelBuilder.Entity("UserTestingAPI.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2566b911-4aec-46f5-ba91-e7510e217c76"),
                            Email = "default@mail.com",
                            PasswordHash = "beb9d63a3d6695b8bbeee366486e39f0e34dab9c04917091baab33c37ca1f9d7",
                            PasswordSalt = "mjJRzM0yozbH3ERejBCxKw=="
                        });
                });

            modelBuilder.Entity("UserTestingAPI.Domain.Entities.CompletedTest", b =>
                {
                    b.HasOne("UserTestingAPI.Domain.Entities.Test", "Test")
                        .WithMany("CompletedTests")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserTestingAPI.Domain.Entities.User", "User")
                        .WithMany("CompletedTests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserTestingAPI.Domain.Entities.Option", b =>
                {
                    b.HasOne("UserTestingAPI.Domain.Entities.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("UserTestingAPI.Domain.Entities.Question", b =>
                {
                    b.HasOne("UserTestingAPI.Domain.Entities.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("UserTestingAPI.Domain.Entities.Question", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("UserTestingAPI.Domain.Entities.Test", b =>
                {
                    b.Navigation("CompletedTests");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("UserTestingAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("CompletedTests");
                });
#pragma warning restore 612, 618
        }
    }
}
